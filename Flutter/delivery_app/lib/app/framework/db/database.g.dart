// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'database.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:UserEntity.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// ignore_for_file:
// BEGIN TABLES
// UserEntity TABLE
class TableUserEntity extends SqfEntityTableBase {
  TableUserEntity() {
    // declare properties of EntityTable
    tableName = 'user';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_unique;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('email', DbType.text, isNotNull: false),
      SqfEntityFieldBase('name', DbType.text, isNotNull: false),
      SqfEntityFieldBase('phone', DbType.text,
          defaultValue: '', isNotNull: false),
      SqfEntityFieldBase('image', DbType.text, isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableUserEntity();
  }
}

// OrderEntity TABLE
class TableOrderEntity extends SqfEntityTableBase {
  TableOrderEntity() {
    // declare properties of EntityTable
    tableName = 'order';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldRelationshipBase(
          TableUserEntity.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'userId',
          isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableOrderEntity();
  }
}

// ProductEntity TABLE
class TableProductEntity extends SqfEntityTableBase {
  TableProductEntity() {
    // declare properties of EntityTable
    tableName = 'product';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_unique;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text, isNotNull: false),
      SqfEntityFieldBase('description', DbType.text, isNotNull: false),
      SqfEntityFieldBase('price', DbType.real, isNotNull: false),
      SqfEntityFieldBase('image', DbType.text, isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableProductEntity();
  }
}

// OrderItemEntity TABLE
class TableOrderItemEntity extends SqfEntityTableBase {
  TableOrderItemEntity() {
    // declare properties of EntityTable
    tableName = 'order_item';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('qty', DbType.integer, isNotNull: false),
      SqfEntityFieldBase('indications', DbType.text, isNotNull: false),
      SqfEntityFieldRelationshipBase(
          TableProductEntity.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'productId',
          isNotNull: false),
      SqfEntityFieldRelationshipBase(
          TableOrderEntity.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'orderId',
          isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableOrderItemEntity();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class AppDatabase extends SqfEntityModelProvider {
  AppDatabase() {
    databaseName = appDatabase.databaseName;
    password = appDatabase.password;
    dbVersion = appDatabase.dbVersion;
    databaseTables = [
      TableUserEntity.getInstance,
      TableOrderEntity.getInstance,
      TableProductEntity.getInstance,
      TableOrderItemEntity.getInstance,
    ];

    bundledDatabasePath = appDatabase
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region UserEntity
class UserEntity {
  UserEntity({this.id, this.email, this.name, this.phone, this.image}) {
    _setDefaultValues();
  }
  UserEntity.withFields(
      this.id, this.email, this.name, this.phone, this.image) {
    _setDefaultValues();
  }
  UserEntity.withId(this.id, this.email, this.name, this.phone, this.image) {
    _setDefaultValues();
  }
  UserEntity.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['email'] != null) {
      email = o['email'] as String;
    }
    if (o['name'] != null) {
      name = o['name'] as String;
    }
    if (o['phone'] != null) {
      phone = o['phone'] as String;
    }
    if (o['image'] != null) {
      image = o['image'] as String;
    }

    isSaved = true;
  }
  // FIELDS (UserEntity)
  int id;
  String email;
  String name;
  String phone;
  String image;
  bool isSaved;
  BoolResult saveResult;
  // end FIELDS (UserEntity)

// COLLECTIONS & VIRTUALS (UserEntity)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields. Ex: toList(preload:true, preloadFields:['plOrderEntities', 'plField2'..]) or so on..
  List<OrderEntity> plOrderEntities;

  /// get OrderEntity(s) filtered by id=userId
  OrderEntityFilterBuilder getOrderEntities(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return OrderEntity()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .userId
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (UserEntity)

  static const bool _softDeleteActivated = false;
  UserEntityManager __mnUserEntity;

  UserEntityManager get _mnUserEntity {
    return __mnUserEntity = __mnUserEntity ?? UserEntityManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (email != null) {
      map['email'] = email;
    }

    if (name != null) {
      map['name'] = name;
    }

    if (phone != null) {
      map['phone'] = phone;
    }

    if (image != null) {
      map['image'] = image;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (email != null) {
      map['email'] = email;
    }

    if (name != null) {
      map['name'] = name;
    }

    if (phone != null) {
      map['phone'] = phone;
    }

    if (image != null) {
      map['image'] = image;
    }

// COLLECTIONS (UserEntity)
    if (!forQuery) {
      map['OrderEntities'] = await getOrderEntities().toMapList();
    }
// END COLLECTIONS (UserEntity)

    return map;
  }

  /// This method returns Json String [UserEntity]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [UserEntity]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [id, email, name, phone, image];
  }

  List<dynamic> toArgsWithIds() {
    return [id, email, name, phone, image];
  }

  static Future<List<UserEntity>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR UserEntity.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<UserEntity>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <UserEntity>[];
    try {
      objList = list
          .map((userentity) =>
              UserEntity.fromMap(userentity as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR UserEntity.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<UserEntity>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<UserEntity> objList = <UserEntity>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = UserEntity.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('user.plOrderEntities') && */ (preloadFields ==
                null ||
            preloadFields.contains('plOrderEntities'))) {
          /*_loadedFields.add('user.plOrderEntities'); */
          obj.plOrderEntities = obj.plOrderEntities ??
              await obj.getOrderEntities().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns UserEntity by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns UserEntity if exist, otherwise returns null
  Future<UserEntity> getById(int id,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    UserEntity obj;
    final data = await _mnUserEntity.getById([id]);
    if (data.length != 0) {
      obj = UserEntity.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('user.plOrderEntities') && */ (preloadFields ==
                null ||
            preloadFields.contains('plOrderEntities'))) {
          /*_loadedFields.add('user.plOrderEntities'); */
          obj.plOrderEntities = obj.plOrderEntities ??
              await obj.getOrderEntities().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (UserEntity) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0 || !isSaved) {
      await _mnUserEntity.insert(this);
      if (saveResult != null && saveResult.success) {
        isSaved = true;
      }
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnUserEntity.update(this);
    }

    return id;
  }

  /// saveAll method saves the sent List<UserEntity> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<UserEntity> userentities) async {
    // final results = _mnUserEntity.saveAll('INSERT OR REPLACE INTO user (id,email, name, phone, image)  VALUES (?,?,?,?,?)',userentities);
    // return results; removed in sqfentity_gen 1.3.0+6
    await AppDatabase().batchStart();
    for (final obj in userentities) {
      await obj.save();
    }
    //    return AppDatabase().batchCommit();
    final result = await AppDatabase().batchCommit();

    return result;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> upsert() async {
    try {
      if (await _mnUserEntity.rawInsert(
              'INSERT OR REPLACE INTO user (id,email, name, phone, image)  VALUES (?,?,?,?,?)',
              [id, email, name, phone, image]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'UserEntity id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'UserEntity id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'UserEntity Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<UserEntity>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<UserEntity> userentities) async {
    final results = await _mnUserEntity.rawInsertAll(
        'INSERT OR REPLACE INTO user (id,email, name, phone, image)  VALUES (?,?,?,?,?)',
        userentities);
    return results;
  }

  /// Deletes UserEntity

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete UserEntity invoked (id=$id)');
    var result = BoolResult();
    {
      result =
          await OrderEntity().select().userId.equals(id).and.delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnUserEntity
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnUserEntity.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  UserEntityFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return UserEntityFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  UserEntityFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return UserEntityFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
    phone = phone ?? '';
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion userentity

// region UserEntityField
class UserEntityField extends SearchCriteria {
  UserEntityField(this.userentityFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  UserEntityFilterBuilder userentityFB;

  UserEntityField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  UserEntityFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    userentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userentityFB.parameters, param, SqlSyntax.EQuals,
            userentityFB._addedBlocks)
        : setCriteria(pValue, userentityFB.parameters, param,
            SqlSyntax.NotEQuals, userentityFB._addedBlocks);
    _waitingNot = '';
    userentityFB._addedBlocks.needEndBlock[userentityFB._blockIndex] =
        userentityFB._addedBlocks.retVal;
    return userentityFB;
  }

  UserEntityFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    userentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userentityFB.parameters, param,
            SqlSyntax.EQualsOrNull, userentityFB._addedBlocks)
        : setCriteria(pValue, userentityFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, userentityFB._addedBlocks);
    _waitingNot = '';
    userentityFB._addedBlocks.needEndBlock[userentityFB._blockIndex] =
        userentityFB._addedBlocks.retVal;
    return userentityFB;
  }

  UserEntityFilterBuilder isNull() {
    userentityFB._addedBlocks = setCriteria(
        0,
        userentityFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        userentityFB._addedBlocks);
    _waitingNot = '';
    userentityFB._addedBlocks.needEndBlock[userentityFB._blockIndex] =
        userentityFB._addedBlocks.retVal;
    return userentityFB;
  }

  UserEntityFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      userentityFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          userentityFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          userentityFB._addedBlocks);
      _waitingNot = '';
      userentityFB._addedBlocks.needEndBlock[userentityFB._blockIndex] =
          userentityFB._addedBlocks.retVal;
    }
    return userentityFB;
  }

  UserEntityFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      userentityFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          userentityFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          userentityFB._addedBlocks);
      _waitingNot = '';
      userentityFB._addedBlocks.needEndBlock[userentityFB._blockIndex] =
          userentityFB._addedBlocks.retVal;
      userentityFB._addedBlocks.needEndBlock[userentityFB._blockIndex] =
          userentityFB._addedBlocks.retVal;
    }
    return userentityFB;
  }

  UserEntityFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      userentityFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          userentityFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          userentityFB._addedBlocks);
      _waitingNot = '';
      userentityFB._addedBlocks.needEndBlock[userentityFB._blockIndex] =
          userentityFB._addedBlocks.retVal;
    }
    return userentityFB;
  }

  UserEntityFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      userentityFB._addedBlocks = setCriteria(
          pFirst,
          userentityFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          userentityFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        userentityFB._addedBlocks = setCriteria(pFirst, userentityFB.parameters,
            param, SqlSyntax.LessThan, userentityFB._addedBlocks);
      } else {
        userentityFB._addedBlocks = setCriteria(pFirst, userentityFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, userentityFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        userentityFB._addedBlocks = setCriteria(pLast, userentityFB.parameters,
            param, SqlSyntax.GreaterThan, userentityFB._addedBlocks);
      } else {
        userentityFB._addedBlocks = setCriteria(pLast, userentityFB.parameters,
            param, SqlSyntax.LessThanOrEquals, userentityFB._addedBlocks);
      }
    }
    _waitingNot = '';
    userentityFB._addedBlocks.needEndBlock[userentityFB._blockIndex] =
        userentityFB._addedBlocks.retVal;
    return userentityFB;
  }

  UserEntityFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    userentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userentityFB.parameters, param,
            SqlSyntax.GreaterThan, userentityFB._addedBlocks)
        : setCriteria(pValue, userentityFB.parameters, param,
            SqlSyntax.LessThanOrEquals, userentityFB._addedBlocks);
    _waitingNot = '';
    userentityFB._addedBlocks.needEndBlock[userentityFB._blockIndex] =
        userentityFB._addedBlocks.retVal;
    return userentityFB;
  }

  UserEntityFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    userentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userentityFB.parameters, param,
            SqlSyntax.LessThan, userentityFB._addedBlocks)
        : setCriteria(pValue, userentityFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, userentityFB._addedBlocks);
    _waitingNot = '';
    userentityFB._addedBlocks.needEndBlock[userentityFB._blockIndex] =
        userentityFB._addedBlocks.retVal;
    return userentityFB;
  }

  UserEntityFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    userentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userentityFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, userentityFB._addedBlocks)
        : setCriteria(pValue, userentityFB.parameters, param,
            SqlSyntax.LessThan, userentityFB._addedBlocks);
    _waitingNot = '';
    userentityFB._addedBlocks.needEndBlock[userentityFB._blockIndex] =
        userentityFB._addedBlocks.retVal;
    return userentityFB;
  }

  UserEntityFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    userentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userentityFB.parameters, param,
            SqlSyntax.LessThanOrEquals, userentityFB._addedBlocks)
        : setCriteria(pValue, userentityFB.parameters, param,
            SqlSyntax.GreaterThan, userentityFB._addedBlocks);
    _waitingNot = '';
    userentityFB._addedBlocks.needEndBlock[userentityFB._blockIndex] =
        userentityFB._addedBlocks.retVal;
    return userentityFB;
  }

  UserEntityFilterBuilder inValues(dynamic pValue) {
    userentityFB._addedBlocks = setCriteria(
        pValue,
        userentityFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        userentityFB._addedBlocks);
    _waitingNot = '';
    userentityFB._addedBlocks.needEndBlock[userentityFB._blockIndex] =
        userentityFB._addedBlocks.retVal;
    return userentityFB;
  }
}
// endregion UserEntityField

// region UserEntityFilterBuilder
class UserEntityFilterBuilder extends SearchCriteria {
  UserEntityFilterBuilder(UserEntity obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  UserEntity _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  UserEntityFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  UserEntityFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  UserEntityFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  UserEntityFilterBuilder where(String whereCriteria,
      {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  UserEntityFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  UserEntityFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  UserEntityFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  UserEntityFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  UserEntityFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  UserEntityFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  UserEntityFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  UserEntityField setField(
      UserEntityField field, String colName, DbType dbtype) {
    return UserEntityField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  UserEntityField _id;
  UserEntityField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  UserEntityField _email;
  UserEntityField get email {
    return _email = setField(_email, 'email', DbType.text);
  }

  UserEntityField _name;
  UserEntityField get name {
    return _name = setField(_name, 'name', DbType.text);
  }

  UserEntityField _phone;
  UserEntityField get phone {
    return _phone = setField(_phone, 'phone', DbType.text);
  }

  UserEntityField _image;
  UserEntityField get image {
    return _image = setField(_image, 'image', DbType.text);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (UserEntity._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<UserEntity> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    // Delete sub records where in (OrderEntity) according to DeleteRule.CASCADE
    final idListOrderEntityBYuserId = toListPrimaryKeySQL(false);
    final resOrderEntityBYuserId = await OrderEntity()
        .select()
        .where('userId IN (${idListOrderEntityBYuserId['sql']})',
            parameterValue: idListOrderEntityBYuserId['args'])
        .delete(hardDelete);
    if (!resOrderEntityBYuserId.success) {
      return resOrderEntityBYuserId;
    }

    if (UserEntity._softDeleteActivated && !hardDelete) {
      r = await _obj._mnUserEntity.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnUserEntity.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from user ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnUserEntity.updateBatch(qparams, values);
  }

  /// This method always returns UserEntity Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<UserEntity>
  Future<UserEntity> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnUserEntity.toList(qparams);
    final data = await objFuture;
    UserEntity obj;
    if (data.isNotEmpty) {
      obj = UserEntity.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('user.plOrderEntities') && */ (preloadFields ==
                null ||
            preloadFields.contains('plOrderEntities'))) {
          /*_loadedFields.add('user.plOrderEntities'); */
          obj.plOrderEntities = obj.plOrderEntities ??
              await obj.getOrderEntities().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [UserEntity]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) userentityCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final userentitiesFuture = await _obj._mnUserEntity.toList(qparams);
    final int count = userentitiesFuture[0]['CNT'] as int;
    if (userentityCount != null) {
      userentityCount(count);
    }
    return count;
  }

  /// This method returns List<UserEntity> [UserEntity]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<UserEntity>
  Future<List<UserEntity>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<UserEntity> userentitiesData = await UserEntity.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return userentitiesData;
  }

  /// This method returns Json String [UserEntity]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [UserEntity]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [UserEntity]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnUserEntity.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [UserEntity]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM user WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnUserEntity.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [UserEntity]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnUserEntity.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await UserEntity.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnUserEntity.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion UserEntityFilterBuilder

// region UserEntityFields
class UserEntityFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fEmail;
  static TableField get email {
    return _fEmail =
        _fEmail ?? SqlSyntax.setField(_fEmail, 'email', DbType.text);
  }

  static TableField _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField _fPhone;
  static TableField get phone {
    return _fPhone =
        _fPhone ?? SqlSyntax.setField(_fPhone, 'phone', DbType.text);
  }

  static TableField _fImage;
  static TableField get image {
    return _fImage =
        _fImage ?? SqlSyntax.setField(_fImage, 'image', DbType.text);
  }
}
// endregion UserEntityFields

//region UserEntityManager
class UserEntityManager extends SqfEntityProvider {
  UserEntityManager()
      : super(AppDatabase(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'user';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion UserEntityManager
// region OrderEntity
class OrderEntity {
  OrderEntity({this.id, this.userId}) {
    _setDefaultValues();
  }
  OrderEntity.withFields(this.userId) {
    _setDefaultValues();
  }
  OrderEntity.withId(this.id, this.userId) {
    _setDefaultValues();
  }
  OrderEntity.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    userId = int.tryParse(o['userId'].toString());

    // RELATIONSHIPS FromMAP
    plUserEntity = o['userEntity'] != null
        ? UserEntity.fromMap(o['userEntity'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (OrderEntity)
  int id;
  int userId;

  BoolResult saveResult;
  // end FIELDS (OrderEntity)

// RELATIONSHIPS (OrderEntity)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields. Ex: toList(preload:true, preloadFields:['plUserEntity', 'plField2'..]) or so on..
  UserEntity plUserEntity;

  /// get UserEntity By UserId
  Future<UserEntity> getUserEntity(
      {bool loadParents = false, List<String> loadedFields}) async {
    final _obj = await UserEntity()
        .getById(userId, loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (OrderEntity)

// COLLECTIONS & VIRTUALS (OrderEntity)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields. Ex: toList(preload:true, preloadFields:['plOrderItemEntities', 'plField2'..]) or so on..
  List<OrderItemEntity> plOrderItemEntities;

  /// get OrderItemEntity(s) filtered by id=orderId
  OrderItemEntityFilterBuilder getOrderItemEntities(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return OrderItemEntity()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .orderId
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (OrderEntity)

  static const bool _softDeleteActivated = false;
  OrderEntityManager __mnOrderEntity;

  OrderEntityManager get _mnOrderEntity {
    return __mnOrderEntity = __mnOrderEntity ?? OrderEntityManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (userId != null) {
      map['userId'] = forView ? plUserEntity.email : userId;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (userId != null) {
      map['userId'] = forView ? plUserEntity.email : userId;
    }

// COLLECTIONS (OrderEntity)
    if (!forQuery) {
      map['OrderItemEntities'] = await getOrderItemEntities().toMapList();
    }
// END COLLECTIONS (OrderEntity)

    return map;
  }

  /// This method returns Json String [OrderEntity]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [OrderEntity]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [userId];
  }

  List<dynamic> toArgsWithIds() {
    return [id, userId];
  }

  static Future<List<OrderEntity>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR OrderEntity.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<OrderEntity>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <OrderEntity>[];
    try {
      objList = list
          .map((orderentity) =>
              OrderEntity.fromMap(orderentity as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR OrderEntity.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<OrderEntity>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<OrderEntity> objList = <OrderEntity>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = OrderEntity.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('order.plOrderItemEntities') && */ (preloadFields ==
                null ||
            preloadFields.contains('plOrderItemEntities'))) {
          /*_loadedFields.add('order.plOrderItemEntities'); */
          obj.plOrderItemEntities = obj.plOrderItemEntities ??
              await obj.getOrderItemEntities().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('user.plUserEntity') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plUserEntity'))) {
          /*_loadedFields.add('user.plUserEntity');*/
          obj.plUserEntity = obj.plUserEntity ??
              await obj.getUserEntity(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns OrderEntity by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns OrderEntity if exist, otherwise returns null
  Future<OrderEntity> getById(int id,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    OrderEntity obj;
    final data = await _mnOrderEntity.getById([id]);
    if (data.length != 0) {
      obj = OrderEntity.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('order.plOrderItemEntities') && */ (preloadFields ==
                null ||
            preloadFields.contains('plOrderItemEntities'))) {
          /*_loadedFields.add('order.plOrderItemEntities'); */
          obj.plOrderItemEntities = obj.plOrderItemEntities ??
              await obj.getOrderItemEntities().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('user.plUserEntity') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plUserEntity'))) {
          /*_loadedFields.add('user.plUserEntity');*/
          obj.plUserEntity = obj.plUserEntity ??
              await obj.getUserEntity(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (OrderEntity) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnOrderEntity.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnOrderEntity.update(this);
    }

    return id;
  }

  /// saveAs OrderEntity. Returns a new Primary Key value of OrderEntity

  /// <returns>Returns a new Primary Key value of OrderEntity
  Future<int> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<OrderEntity> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<OrderEntity> orderentities) async {
    // final results = _mnOrderEntity.saveAll('INSERT OR REPLACE INTO order (id,userId)  VALUES (?,?)',orderentities);
    // return results; removed in sqfentity_gen 1.3.0+6
    await AppDatabase().batchStart();
    for (final obj in orderentities) {
      await obj.save();
    }
    //    return AppDatabase().batchCommit();
    final result = await AppDatabase().batchCommit();
    for (int i = 0; i < orderentities.length; i++) {
      if (orderentities[i].id == null) {
        orderentities[i].id = result[i] as int;
      }
    }

    return result;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> upsert() async {
    try {
      if (await _mnOrderEntity.rawInsert(
              'INSERT OR REPLACE INTO order (id,userId)  VALUES (?,?)',
              [id, userId]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'OrderEntity id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'OrderEntity id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'OrderEntity Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<OrderEntity>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<OrderEntity> orderentities) async {
    final results = await _mnOrderEntity.rawInsertAll(
        'INSERT OR REPLACE INTO order (id,userId)  VALUES (?,?)',
        orderentities);
    return results;
  }

  /// Deletes OrderEntity

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete OrderEntity invoked (id=$id)');
    var result = BoolResult();
    {
      result = await OrderItemEntity()
          .select()
          .orderId
          .equals(id)
          .and
          .delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnOrderEntity
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnOrderEntity.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  OrderEntityFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return OrderEntityFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  OrderEntityFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return OrderEntityFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion orderentity

// region OrderEntityField
class OrderEntityField extends SearchCriteria {
  OrderEntityField(this.orderentityFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  OrderEntityFilterBuilder orderentityFB;

  OrderEntityField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  OrderEntityFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    orderentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, orderentityFB.parameters, param, SqlSyntax.EQuals,
            orderentityFB._addedBlocks)
        : setCriteria(pValue, orderentityFB.parameters, param,
            SqlSyntax.NotEQuals, orderentityFB._addedBlocks);
    _waitingNot = '';
    orderentityFB._addedBlocks.needEndBlock[orderentityFB._blockIndex] =
        orderentityFB._addedBlocks.retVal;
    return orderentityFB;
  }

  OrderEntityFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    orderentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, orderentityFB.parameters, param,
            SqlSyntax.EQualsOrNull, orderentityFB._addedBlocks)
        : setCriteria(pValue, orderentityFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, orderentityFB._addedBlocks);
    _waitingNot = '';
    orderentityFB._addedBlocks.needEndBlock[orderentityFB._blockIndex] =
        orderentityFB._addedBlocks.retVal;
    return orderentityFB;
  }

  OrderEntityFilterBuilder isNull() {
    orderentityFB._addedBlocks = setCriteria(
        0,
        orderentityFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        orderentityFB._addedBlocks);
    _waitingNot = '';
    orderentityFB._addedBlocks.needEndBlock[orderentityFB._blockIndex] =
        orderentityFB._addedBlocks.retVal;
    return orderentityFB;
  }

  OrderEntityFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      orderentityFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          orderentityFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          orderentityFB._addedBlocks);
      _waitingNot = '';
      orderentityFB._addedBlocks.needEndBlock[orderentityFB._blockIndex] =
          orderentityFB._addedBlocks.retVal;
    }
    return orderentityFB;
  }

  OrderEntityFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      orderentityFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          orderentityFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          orderentityFB._addedBlocks);
      _waitingNot = '';
      orderentityFB._addedBlocks.needEndBlock[orderentityFB._blockIndex] =
          orderentityFB._addedBlocks.retVal;
      orderentityFB._addedBlocks.needEndBlock[orderentityFB._blockIndex] =
          orderentityFB._addedBlocks.retVal;
    }
    return orderentityFB;
  }

  OrderEntityFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      orderentityFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          orderentityFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          orderentityFB._addedBlocks);
      _waitingNot = '';
      orderentityFB._addedBlocks.needEndBlock[orderentityFB._blockIndex] =
          orderentityFB._addedBlocks.retVal;
    }
    return orderentityFB;
  }

  OrderEntityFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      orderentityFB._addedBlocks = setCriteria(
          pFirst,
          orderentityFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          orderentityFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        orderentityFB._addedBlocks = setCriteria(
            pFirst,
            orderentityFB.parameters,
            param,
            SqlSyntax.LessThan,
            orderentityFB._addedBlocks);
      } else {
        orderentityFB._addedBlocks = setCriteria(
            pFirst,
            orderentityFB.parameters,
            param,
            SqlSyntax.GreaterThanOrEquals,
            orderentityFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        orderentityFB._addedBlocks = setCriteria(
            pLast,
            orderentityFB.parameters,
            param,
            SqlSyntax.GreaterThan,
            orderentityFB._addedBlocks);
      } else {
        orderentityFB._addedBlocks = setCriteria(
            pLast,
            orderentityFB.parameters,
            param,
            SqlSyntax.LessThanOrEquals,
            orderentityFB._addedBlocks);
      }
    }
    _waitingNot = '';
    orderentityFB._addedBlocks.needEndBlock[orderentityFB._blockIndex] =
        orderentityFB._addedBlocks.retVal;
    return orderentityFB;
  }

  OrderEntityFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    orderentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, orderentityFB.parameters, param,
            SqlSyntax.GreaterThan, orderentityFB._addedBlocks)
        : setCriteria(pValue, orderentityFB.parameters, param,
            SqlSyntax.LessThanOrEquals, orderentityFB._addedBlocks);
    _waitingNot = '';
    orderentityFB._addedBlocks.needEndBlock[orderentityFB._blockIndex] =
        orderentityFB._addedBlocks.retVal;
    return orderentityFB;
  }

  OrderEntityFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    orderentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, orderentityFB.parameters, param,
            SqlSyntax.LessThan, orderentityFB._addedBlocks)
        : setCriteria(pValue, orderentityFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, orderentityFB._addedBlocks);
    _waitingNot = '';
    orderentityFB._addedBlocks.needEndBlock[orderentityFB._blockIndex] =
        orderentityFB._addedBlocks.retVal;
    return orderentityFB;
  }

  OrderEntityFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    orderentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, orderentityFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, orderentityFB._addedBlocks)
        : setCriteria(pValue, orderentityFB.parameters, param,
            SqlSyntax.LessThan, orderentityFB._addedBlocks);
    _waitingNot = '';
    orderentityFB._addedBlocks.needEndBlock[orderentityFB._blockIndex] =
        orderentityFB._addedBlocks.retVal;
    return orderentityFB;
  }

  OrderEntityFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    orderentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, orderentityFB.parameters, param,
            SqlSyntax.LessThanOrEquals, orderentityFB._addedBlocks)
        : setCriteria(pValue, orderentityFB.parameters, param,
            SqlSyntax.GreaterThan, orderentityFB._addedBlocks);
    _waitingNot = '';
    orderentityFB._addedBlocks.needEndBlock[orderentityFB._blockIndex] =
        orderentityFB._addedBlocks.retVal;
    return orderentityFB;
  }

  OrderEntityFilterBuilder inValues(dynamic pValue) {
    orderentityFB._addedBlocks = setCriteria(
        pValue,
        orderentityFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        orderentityFB._addedBlocks);
    _waitingNot = '';
    orderentityFB._addedBlocks.needEndBlock[orderentityFB._blockIndex] =
        orderentityFB._addedBlocks.retVal;
    return orderentityFB;
  }
}
// endregion OrderEntityField

// region OrderEntityFilterBuilder
class OrderEntityFilterBuilder extends SearchCriteria {
  OrderEntityFilterBuilder(OrderEntity obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  OrderEntity _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  OrderEntityFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  OrderEntityFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  OrderEntityFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  OrderEntityFilterBuilder where(String whereCriteria,
      {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  OrderEntityFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  OrderEntityFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  OrderEntityFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  OrderEntityFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  OrderEntityFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  OrderEntityFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  OrderEntityFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  OrderEntityField setField(
      OrderEntityField field, String colName, DbType dbtype) {
    return OrderEntityField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  OrderEntityField _id;
  OrderEntityField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  OrderEntityField _userId;
  OrderEntityField get userId {
    return _userId = setField(_userId, 'userId', DbType.integer);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (OrderEntity._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<OrderEntity> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    // Delete sub records where in (OrderItemEntity) according to DeleteRule.CASCADE
    final idListOrderItemEntityBYorderId = toListPrimaryKeySQL(false);
    final resOrderItemEntityBYorderId = await OrderItemEntity()
        .select()
        .where('orderId IN (${idListOrderItemEntityBYorderId['sql']})',
            parameterValue: idListOrderItemEntityBYorderId['args'])
        .delete(hardDelete);
    if (!resOrderItemEntityBYorderId.success) {
      return resOrderItemEntityBYorderId;
    }

    if (OrderEntity._softDeleteActivated && !hardDelete) {
      r = await _obj._mnOrderEntity.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnOrderEntity.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from order ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnOrderEntity.updateBatch(qparams, values);
  }

  /// This method always returns OrderEntity Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<OrderEntity>
  Future<OrderEntity> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnOrderEntity.toList(qparams);
    final data = await objFuture;
    OrderEntity obj;
    if (data.isNotEmpty) {
      obj = OrderEntity.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('order.plOrderItemEntities') && */ (preloadFields ==
                null ||
            preloadFields.contains('plOrderItemEntities'))) {
          /*_loadedFields.add('order.plOrderItemEntities'); */
          obj.plOrderItemEntities = obj.plOrderItemEntities ??
              await obj.getOrderItemEntities().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('user.plUserEntity') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plUserEntity'))) {
          /*_loadedFields.add('user.plUserEntity');*/
          obj.plUserEntity = obj.plUserEntity ??
              await obj.getUserEntity(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [OrderEntity]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) orderentityCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final orderentitiesFuture = await _obj._mnOrderEntity.toList(qparams);
    final int count = orderentitiesFuture[0]['CNT'] as int;
    if (orderentityCount != null) {
      orderentityCount(count);
    }
    return count;
  }

  /// This method returns List<OrderEntity> [OrderEntity]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<OrderEntity>
  Future<List<OrderEntity>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<OrderEntity> orderentitiesData = await OrderEntity.fromMapList(
        data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return orderentitiesData;
  }

  /// This method returns Json String [OrderEntity]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [OrderEntity]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [OrderEntity]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnOrderEntity.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [OrderEntity]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM order WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnOrderEntity.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [OrderEntity]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnOrderEntity.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await OrderEntity.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnOrderEntity.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion OrderEntityFilterBuilder

// region OrderEntityFields
class OrderEntityFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fUserId;
  static TableField get userId {
    return _fUserId =
        _fUserId ?? SqlSyntax.setField(_fUserId, 'userId', DbType.integer);
  }
}
// endregion OrderEntityFields

//region OrderEntityManager
class OrderEntityManager extends SqfEntityProvider {
  OrderEntityManager()
      : super(AppDatabase(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'order';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion OrderEntityManager
// region ProductEntity
class ProductEntity {
  ProductEntity(
      {this.id, this.name, this.description, this.price, this.image}) {
    _setDefaultValues();
  }
  ProductEntity.withFields(
      this.id, this.name, this.description, this.price, this.image) {
    _setDefaultValues();
  }
  ProductEntity.withId(
      this.id, this.name, this.description, this.price, this.image) {
    _setDefaultValues();
  }
  ProductEntity.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'] as String;
    }
    if (o['description'] != null) {
      description = o['description'] as String;
    }
    if (o['price'] != null) {
      price = double.tryParse(o['price'].toString());
    }
    if (o['image'] != null) {
      image = o['image'] as String;
    }

    isSaved = true;
  }
  // FIELDS (ProductEntity)
  int id;
  String name;
  String description;
  double price;
  String image;
  bool isSaved;
  BoolResult saveResult;
  // end FIELDS (ProductEntity)

// COLLECTIONS & VIRTUALS (ProductEntity)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields. Ex: toList(preload:true, preloadFields:['plOrderItemEntities', 'plField2'..]) or so on..
  List<OrderItemEntity> plOrderItemEntities;

  /// get OrderItemEntity(s) filtered by id=productId
  OrderItemEntityFilterBuilder getOrderItemEntities(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return OrderItemEntity()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .productId
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (ProductEntity)

  static const bool _softDeleteActivated = false;
  ProductEntityManager __mnProductEntity;

  ProductEntityManager get _mnProductEntity {
    return __mnProductEntity = __mnProductEntity ?? ProductEntityManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (description != null) {
      map['description'] = description;
    }

    if (price != null) {
      map['price'] = price;
    }

    if (image != null) {
      map['image'] = image;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (description != null) {
      map['description'] = description;
    }

    if (price != null) {
      map['price'] = price;
    }

    if (image != null) {
      map['image'] = image;
    }

// COLLECTIONS (ProductEntity)
    if (!forQuery) {
      map['OrderItemEntities'] = await getOrderItemEntities().toMapList();
    }
// END COLLECTIONS (ProductEntity)

    return map;
  }

  /// This method returns Json String [ProductEntity]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [ProductEntity]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [id, name, description, price, image];
  }

  List<dynamic> toArgsWithIds() {
    return [id, name, description, price, image];
  }

  static Future<List<ProductEntity>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR ProductEntity.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<ProductEntity>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <ProductEntity>[];
    try {
      objList = list
          .map((productentity) =>
              ProductEntity.fromMap(productentity as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR ProductEntity.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<ProductEntity>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<ProductEntity> objList = <ProductEntity>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = ProductEntity.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('product.plOrderItemEntities') && */ (preloadFields ==
                null ||
            preloadFields.contains('plOrderItemEntities'))) {
          /*_loadedFields.add('product.plOrderItemEntities'); */
          obj.plOrderItemEntities = obj.plOrderItemEntities ??
              await obj.getOrderItemEntities().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns ProductEntity by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns ProductEntity if exist, otherwise returns null
  Future<ProductEntity> getById(int id,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    ProductEntity obj;
    final data = await _mnProductEntity.getById([id]);
    if (data.length != 0) {
      obj = ProductEntity.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('product.plOrderItemEntities') && */ (preloadFields ==
                null ||
            preloadFields.contains('plOrderItemEntities'))) {
          /*_loadedFields.add('product.plOrderItemEntities'); */
          obj.plOrderItemEntities = obj.plOrderItemEntities ??
              await obj.getOrderItemEntities().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (ProductEntity) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0 || !isSaved) {
      await _mnProductEntity.insert(this);
      if (saveResult != null && saveResult.success) {
        isSaved = true;
      }
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnProductEntity.update(this);
    }

    return id;
  }

  /// saveAll method saves the sent List<ProductEntity> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<ProductEntity> productentities) async {
    // final results = _mnProductEntity.saveAll('INSERT OR REPLACE INTO product (id,name, description, price, image)  VALUES (?,?,?,?,?)',productentities);
    // return results; removed in sqfentity_gen 1.3.0+6
    await AppDatabase().batchStart();
    for (final obj in productentities) {
      await obj.save();
    }
    //    return AppDatabase().batchCommit();
    final result = await AppDatabase().batchCommit();

    return result;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> upsert() async {
    try {
      if (await _mnProductEntity.rawInsert(
              'INSERT OR REPLACE INTO product (id,name, description, price, image)  VALUES (?,?,?,?,?)',
              [id, name, description, price, image]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'ProductEntity id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'ProductEntity id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'ProductEntity Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<ProductEntity>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(
      List<ProductEntity> productentities) async {
    final results = await _mnProductEntity.rawInsertAll(
        'INSERT OR REPLACE INTO product (id,name, description, price, image)  VALUES (?,?,?,?,?)',
        productentities);
    return results;
  }

  /// Deletes ProductEntity

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete ProductEntity invoked (id=$id)');
    var result = BoolResult();
    {
      result = await OrderItemEntity()
          .select()
          .productId
          .equals(id)
          .and
          .delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnProductEntity
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnProductEntity.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  ProductEntityFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return ProductEntityFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  ProductEntityFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return ProductEntityFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion productentity

// region ProductEntityField
class ProductEntityField extends SearchCriteria {
  ProductEntityField(this.productentityFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  ProductEntityFilterBuilder productentityFB;

  ProductEntityField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  ProductEntityFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    productentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, productentityFB.parameters, param,
            SqlSyntax.EQuals, productentityFB._addedBlocks)
        : setCriteria(pValue, productentityFB.parameters, param,
            SqlSyntax.NotEQuals, productentityFB._addedBlocks);
    _waitingNot = '';
    productentityFB._addedBlocks.needEndBlock[productentityFB._blockIndex] =
        productentityFB._addedBlocks.retVal;
    return productentityFB;
  }

  ProductEntityFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    productentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, productentityFB.parameters, param,
            SqlSyntax.EQualsOrNull, productentityFB._addedBlocks)
        : setCriteria(pValue, productentityFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, productentityFB._addedBlocks);
    _waitingNot = '';
    productentityFB._addedBlocks.needEndBlock[productentityFB._blockIndex] =
        productentityFB._addedBlocks.retVal;
    return productentityFB;
  }

  ProductEntityFilterBuilder isNull() {
    productentityFB._addedBlocks = setCriteria(
        0,
        productentityFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        productentityFB._addedBlocks);
    _waitingNot = '';
    productentityFB._addedBlocks.needEndBlock[productentityFB._blockIndex] =
        productentityFB._addedBlocks.retVal;
    return productentityFB;
  }

  ProductEntityFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      productentityFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          productentityFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          productentityFB._addedBlocks);
      _waitingNot = '';
      productentityFB._addedBlocks.needEndBlock[productentityFB._blockIndex] =
          productentityFB._addedBlocks.retVal;
    }
    return productentityFB;
  }

  ProductEntityFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      productentityFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          productentityFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          productentityFB._addedBlocks);
      _waitingNot = '';
      productentityFB._addedBlocks.needEndBlock[productentityFB._blockIndex] =
          productentityFB._addedBlocks.retVal;
      productentityFB._addedBlocks.needEndBlock[productentityFB._blockIndex] =
          productentityFB._addedBlocks.retVal;
    }
    return productentityFB;
  }

  ProductEntityFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      productentityFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          productentityFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          productentityFB._addedBlocks);
      _waitingNot = '';
      productentityFB._addedBlocks.needEndBlock[productentityFB._blockIndex] =
          productentityFB._addedBlocks.retVal;
    }
    return productentityFB;
  }

  ProductEntityFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      productentityFB._addedBlocks = setCriteria(
          pFirst,
          productentityFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          productentityFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        productentityFB._addedBlocks = setCriteria(
            pFirst,
            productentityFB.parameters,
            param,
            SqlSyntax.LessThan,
            productentityFB._addedBlocks);
      } else {
        productentityFB._addedBlocks = setCriteria(
            pFirst,
            productentityFB.parameters,
            param,
            SqlSyntax.GreaterThanOrEquals,
            productentityFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        productentityFB._addedBlocks = setCriteria(
            pLast,
            productentityFB.parameters,
            param,
            SqlSyntax.GreaterThan,
            productentityFB._addedBlocks);
      } else {
        productentityFB._addedBlocks = setCriteria(
            pLast,
            productentityFB.parameters,
            param,
            SqlSyntax.LessThanOrEquals,
            productentityFB._addedBlocks);
      }
    }
    _waitingNot = '';
    productentityFB._addedBlocks.needEndBlock[productentityFB._blockIndex] =
        productentityFB._addedBlocks.retVal;
    return productentityFB;
  }

  ProductEntityFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    productentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, productentityFB.parameters, param,
            SqlSyntax.GreaterThan, productentityFB._addedBlocks)
        : setCriteria(pValue, productentityFB.parameters, param,
            SqlSyntax.LessThanOrEquals, productentityFB._addedBlocks);
    _waitingNot = '';
    productentityFB._addedBlocks.needEndBlock[productentityFB._blockIndex] =
        productentityFB._addedBlocks.retVal;
    return productentityFB;
  }

  ProductEntityFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    productentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, productentityFB.parameters, param,
            SqlSyntax.LessThan, productentityFB._addedBlocks)
        : setCriteria(pValue, productentityFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, productentityFB._addedBlocks);
    _waitingNot = '';
    productentityFB._addedBlocks.needEndBlock[productentityFB._blockIndex] =
        productentityFB._addedBlocks.retVal;
    return productentityFB;
  }

  ProductEntityFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    productentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, productentityFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, productentityFB._addedBlocks)
        : setCriteria(pValue, productentityFB.parameters, param,
            SqlSyntax.LessThan, productentityFB._addedBlocks);
    _waitingNot = '';
    productentityFB._addedBlocks.needEndBlock[productentityFB._blockIndex] =
        productentityFB._addedBlocks.retVal;
    return productentityFB;
  }

  ProductEntityFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    productentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, productentityFB.parameters, param,
            SqlSyntax.LessThanOrEquals, productentityFB._addedBlocks)
        : setCriteria(pValue, productentityFB.parameters, param,
            SqlSyntax.GreaterThan, productentityFB._addedBlocks);
    _waitingNot = '';
    productentityFB._addedBlocks.needEndBlock[productentityFB._blockIndex] =
        productentityFB._addedBlocks.retVal;
    return productentityFB;
  }

  ProductEntityFilterBuilder inValues(dynamic pValue) {
    productentityFB._addedBlocks = setCriteria(
        pValue,
        productentityFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        productentityFB._addedBlocks);
    _waitingNot = '';
    productentityFB._addedBlocks.needEndBlock[productentityFB._blockIndex] =
        productentityFB._addedBlocks.retVal;
    return productentityFB;
  }
}
// endregion ProductEntityField

// region ProductEntityFilterBuilder
class ProductEntityFilterBuilder extends SearchCriteria {
  ProductEntityFilterBuilder(ProductEntity obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  ProductEntity _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  ProductEntityFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  ProductEntityFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  ProductEntityFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  ProductEntityFilterBuilder where(String whereCriteria,
      {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  ProductEntityFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  ProductEntityFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  ProductEntityFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  ProductEntityFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ProductEntityFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ProductEntityFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  ProductEntityFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  ProductEntityField setField(
      ProductEntityField field, String colName, DbType dbtype) {
    return ProductEntityField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  ProductEntityField _id;
  ProductEntityField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  ProductEntityField _name;
  ProductEntityField get name {
    return _name = setField(_name, 'name', DbType.text);
  }

  ProductEntityField _description;
  ProductEntityField get description {
    return _description = setField(_description, 'description', DbType.text);
  }

  ProductEntityField _price;
  ProductEntityField get price {
    return _price = setField(_price, 'price', DbType.real);
  }

  ProductEntityField _image;
  ProductEntityField get image {
    return _image = setField(_image, 'image', DbType.text);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (ProductEntity._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<ProductEntity> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    // Delete sub records where in (OrderItemEntity) according to DeleteRule.CASCADE
    final idListOrderItemEntityBYproductId = toListPrimaryKeySQL(false);
    final resOrderItemEntityBYproductId = await OrderItemEntity()
        .select()
        .where('productId IN (${idListOrderItemEntityBYproductId['sql']})',
            parameterValue: idListOrderItemEntityBYproductId['args'])
        .delete(hardDelete);
    if (!resOrderItemEntityBYproductId.success) {
      return resOrderItemEntityBYproductId;
    }

    if (ProductEntity._softDeleteActivated && !hardDelete) {
      r = await _obj._mnProductEntity.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnProductEntity.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from product ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnProductEntity.updateBatch(qparams, values);
  }

  /// This method always returns ProductEntity Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<ProductEntity>
  Future<ProductEntity> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnProductEntity.toList(qparams);
    final data = await objFuture;
    ProductEntity obj;
    if (data.isNotEmpty) {
      obj = ProductEntity.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('product.plOrderItemEntities') && */ (preloadFields ==
                null ||
            preloadFields.contains('plOrderItemEntities'))) {
          /*_loadedFields.add('product.plOrderItemEntities'); */
          obj.plOrderItemEntities = obj.plOrderItemEntities ??
              await obj.getOrderItemEntities().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [ProductEntity]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) productentityCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final productentitiesFuture = await _obj._mnProductEntity.toList(qparams);
    final int count = productentitiesFuture[0]['CNT'] as int;
    if (productentityCount != null) {
      productentityCount(count);
    }
    return count;
  }

  /// This method returns List<ProductEntity> [ProductEntity]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<ProductEntity>
  Future<List<ProductEntity>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<ProductEntity> productentitiesData =
        await ProductEntity.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return productentitiesData;
  }

  /// This method returns Json String [ProductEntity]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [ProductEntity]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [ProductEntity]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnProductEntity.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [ProductEntity]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM product WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnProductEntity.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [ProductEntity]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnProductEntity.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await ProductEntity.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnProductEntity.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ProductEntityFilterBuilder

// region ProductEntityFields
class ProductEntityFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField _fDescription;
  static TableField get description {
    return _fDescription = _fDescription ??
        SqlSyntax.setField(_fDescription, 'description', DbType.text);
  }

  static TableField _fPrice;
  static TableField get price {
    return _fPrice =
        _fPrice ?? SqlSyntax.setField(_fPrice, 'price', DbType.real);
  }

  static TableField _fImage;
  static TableField get image {
    return _fImage =
        _fImage ?? SqlSyntax.setField(_fImage, 'image', DbType.text);
  }
}
// endregion ProductEntityFields

//region ProductEntityManager
class ProductEntityManager extends SqfEntityProvider {
  ProductEntityManager()
      : super(AppDatabase(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'product';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion ProductEntityManager
// region OrderItemEntity
class OrderItemEntity {
  OrderItemEntity(
      {this.id, this.qty, this.indications, this.productId, this.orderId}) {
    _setDefaultValues();
  }
  OrderItemEntity.withFields(
      this.qty, this.indications, this.productId, this.orderId) {
    _setDefaultValues();
  }
  OrderItemEntity.withId(
      this.id, this.qty, this.indications, this.productId, this.orderId) {
    _setDefaultValues();
  }
  OrderItemEntity.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['qty'] != null) {
      qty = int.tryParse(o['qty'].toString());
    }
    if (o['indications'] != null) {
      indications = o['indications'] as String;
    }
    productId = int.tryParse(o['productId'].toString());

    orderId = int.tryParse(o['orderId'].toString());

    // RELATIONSHIPS FromMAP
    plProductEntity = o['productEntity'] != null
        ? ProductEntity.fromMap(o['productEntity'] as Map<String, dynamic>)
        : null;
    plOrderEntity = o['orderEntity'] != null
        ? OrderEntity.fromMap(o['orderEntity'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (OrderItemEntity)
  int id;
  int qty;
  String indications;
  int productId;
  int orderId;

  BoolResult saveResult;
  // end FIELDS (OrderItemEntity)

// RELATIONSHIPS (OrderItemEntity)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields. Ex: toList(preload:true, preloadFields:['plProductEntity', 'plField2'..]) or so on..
  ProductEntity plProductEntity;

  /// get ProductEntity By ProductId
  Future<ProductEntity> getProductEntity(
      {bool loadParents = false, List<String> loadedFields}) async {
    final _obj = await ProductEntity().getById(productId,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }

  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields. Ex: toList(preload:true, preloadFields:['plOrderEntity', 'plField2'..]) or so on..
  OrderEntity plOrderEntity;

  /// get OrderEntity By OrderId
  Future<OrderEntity> getOrderEntity(
      {bool loadParents = false, List<String> loadedFields}) async {
    final _obj = await OrderEntity()
        .getById(orderId, loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (OrderItemEntity)

  static const bool _softDeleteActivated = false;
  OrderItemEntityManager __mnOrderItemEntity;

  OrderItemEntityManager get _mnOrderItemEntity {
    return __mnOrderItemEntity =
        __mnOrderItemEntity ?? OrderItemEntityManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (qty != null) {
      map['qty'] = qty;
    }

    if (indications != null) {
      map['indications'] = indications;
    }

    if (productId != null) {
      map['productId'] = forView ? plProductEntity.name : productId;
    }

    if (orderId != null) {
      map['orderId'] = forView ? plOrderEntity.id : orderId;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (qty != null) {
      map['qty'] = qty;
    }

    if (indications != null) {
      map['indications'] = indications;
    }

    if (productId != null) {
      map['productId'] = forView ? plProductEntity.name : productId;
    }

    if (orderId != null) {
      map['orderId'] = forView ? plOrderEntity.id : orderId;
    }

    return map;
  }

  /// This method returns Json String [OrderItemEntity]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [OrderItemEntity]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [qty, indications, productId, orderId];
  }

  List<dynamic> toArgsWithIds() {
    return [id, qty, indications, productId, orderId];
  }

  static Future<List<OrderItemEntity>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR OrderItemEntity.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<OrderItemEntity>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <OrderItemEntity>[];
    try {
      objList = list
          .map((orderitementity) =>
              OrderItemEntity.fromMap(orderitementity as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR OrderItemEntity.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<OrderItemEntity>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<OrderItemEntity> objList = <OrderItemEntity>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = OrderItemEntity.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('product.plProductEntity') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plProductEntity'))) {
          /*_loadedFields.add('product.plProductEntity');*/
          obj.plProductEntity = obj.plProductEntity ??
              await obj.getProductEntity(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
        if (/*!_loadedFields.contains('order.plOrderEntity') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plOrderEntity'))) {
          /*_loadedFields.add('order.plOrderEntity');*/
          obj.plOrderEntity = obj.plOrderEntity ??
              await obj.getOrderEntity(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns OrderItemEntity by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns OrderItemEntity if exist, otherwise returns null
  Future<OrderItemEntity> getById(int id,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    OrderItemEntity obj;
    final data = await _mnOrderItemEntity.getById([id]);
    if (data.length != 0) {
      obj = OrderItemEntity.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('product.plProductEntity') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plProductEntity'))) {
          /*_loadedFields.add('product.plProductEntity');*/
          obj.plProductEntity = obj.plProductEntity ??
              await obj.getProductEntity(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
        if (/*!_loadedFields.contains('order.plOrderEntity') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plOrderEntity'))) {
          /*_loadedFields.add('order.plOrderEntity');*/
          obj.plOrderEntity = obj.plOrderEntity ??
              await obj.getOrderEntity(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (OrderItemEntity) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnOrderItemEntity.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnOrderItemEntity.update(this);
    }

    return id;
  }

  /// saveAs OrderItemEntity. Returns a new Primary Key value of OrderItemEntity

  /// <returns>Returns a new Primary Key value of OrderItemEntity
  Future<int> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<OrderItemEntity> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<OrderItemEntity> orderitementities) async {
    // final results = _mnOrderItemEntity.saveAll('INSERT OR REPLACE INTO order_item (id,qty, indications, productId, orderId)  VALUES (?,?,?,?,?)',orderitementities);
    // return results; removed in sqfentity_gen 1.3.0+6
    await AppDatabase().batchStart();
    for (final obj in orderitementities) {
      await obj.save();
    }
    //    return AppDatabase().batchCommit();
    final result = await AppDatabase().batchCommit();
    for (int i = 0; i < orderitementities.length; i++) {
      if (orderitementities[i].id == null) {
        orderitementities[i].id = result[i] as int;
      }
    }

    return result;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> upsert() async {
    try {
      if (await _mnOrderItemEntity.rawInsert(
              'INSERT OR REPLACE INTO order_item (id,qty, indications, productId, orderId)  VALUES (?,?,?,?,?)',
              [id, qty, indications, productId, orderId]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'OrderItemEntity id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'OrderItemEntity id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'OrderItemEntity Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<OrderItemEntity>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(
      List<OrderItemEntity> orderitementities) async {
    final results = await _mnOrderItemEntity.rawInsertAll(
        'INSERT OR REPLACE INTO order_item (id,qty, indications, productId, orderId)  VALUES (?,?,?,?,?)',
        orderitementities);
    return results;
  }

  /// Deletes OrderItemEntity

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete OrderItemEntity invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnOrderItemEntity
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnOrderItemEntity.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  OrderItemEntityFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return OrderItemEntityFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  OrderItemEntityFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return OrderItemEntityFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion orderitementity

// region OrderItemEntityField
class OrderItemEntityField extends SearchCriteria {
  OrderItemEntityField(this.orderitementityFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  OrderItemEntityFilterBuilder orderitementityFB;

  OrderItemEntityField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  OrderItemEntityFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    orderitementityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, orderitementityFB.parameters, param,
            SqlSyntax.EQuals, orderitementityFB._addedBlocks)
        : setCriteria(pValue, orderitementityFB.parameters, param,
            SqlSyntax.NotEQuals, orderitementityFB._addedBlocks);
    _waitingNot = '';
    orderitementityFB._addedBlocks.needEndBlock[orderitementityFB._blockIndex] =
        orderitementityFB._addedBlocks.retVal;
    return orderitementityFB;
  }

  OrderItemEntityFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    orderitementityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, orderitementityFB.parameters, param,
            SqlSyntax.EQualsOrNull, orderitementityFB._addedBlocks)
        : setCriteria(pValue, orderitementityFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, orderitementityFB._addedBlocks);
    _waitingNot = '';
    orderitementityFB._addedBlocks.needEndBlock[orderitementityFB._blockIndex] =
        orderitementityFB._addedBlocks.retVal;
    return orderitementityFB;
  }

  OrderItemEntityFilterBuilder isNull() {
    orderitementityFB._addedBlocks = setCriteria(
        0,
        orderitementityFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        orderitementityFB._addedBlocks);
    _waitingNot = '';
    orderitementityFB._addedBlocks.needEndBlock[orderitementityFB._blockIndex] =
        orderitementityFB._addedBlocks.retVal;
    return orderitementityFB;
  }

  OrderItemEntityFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      orderitementityFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          orderitementityFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          orderitementityFB._addedBlocks);
      _waitingNot = '';
      orderitementityFB
              ._addedBlocks.needEndBlock[orderitementityFB._blockIndex] =
          orderitementityFB._addedBlocks.retVal;
    }
    return orderitementityFB;
  }

  OrderItemEntityFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      orderitementityFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          orderitementityFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          orderitementityFB._addedBlocks);
      _waitingNot = '';
      orderitementityFB
              ._addedBlocks.needEndBlock[orderitementityFB._blockIndex] =
          orderitementityFB._addedBlocks.retVal;
      orderitementityFB
              ._addedBlocks.needEndBlock[orderitementityFB._blockIndex] =
          orderitementityFB._addedBlocks.retVal;
    }
    return orderitementityFB;
  }

  OrderItemEntityFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      orderitementityFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          orderitementityFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          orderitementityFB._addedBlocks);
      _waitingNot = '';
      orderitementityFB
              ._addedBlocks.needEndBlock[orderitementityFB._blockIndex] =
          orderitementityFB._addedBlocks.retVal;
    }
    return orderitementityFB;
  }

  OrderItemEntityFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      orderitementityFB._addedBlocks = setCriteria(
          pFirst,
          orderitementityFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          orderitementityFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        orderitementityFB._addedBlocks = setCriteria(
            pFirst,
            orderitementityFB.parameters,
            param,
            SqlSyntax.LessThan,
            orderitementityFB._addedBlocks);
      } else {
        orderitementityFB._addedBlocks = setCriteria(
            pFirst,
            orderitementityFB.parameters,
            param,
            SqlSyntax.GreaterThanOrEquals,
            orderitementityFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        orderitementityFB._addedBlocks = setCriteria(
            pLast,
            orderitementityFB.parameters,
            param,
            SqlSyntax.GreaterThan,
            orderitementityFB._addedBlocks);
      } else {
        orderitementityFB._addedBlocks = setCriteria(
            pLast,
            orderitementityFB.parameters,
            param,
            SqlSyntax.LessThanOrEquals,
            orderitementityFB._addedBlocks);
      }
    }
    _waitingNot = '';
    orderitementityFB._addedBlocks.needEndBlock[orderitementityFB._blockIndex] =
        orderitementityFB._addedBlocks.retVal;
    return orderitementityFB;
  }

  OrderItemEntityFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    orderitementityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, orderitementityFB.parameters, param,
            SqlSyntax.GreaterThan, orderitementityFB._addedBlocks)
        : setCriteria(pValue, orderitementityFB.parameters, param,
            SqlSyntax.LessThanOrEquals, orderitementityFB._addedBlocks);
    _waitingNot = '';
    orderitementityFB._addedBlocks.needEndBlock[orderitementityFB._blockIndex] =
        orderitementityFB._addedBlocks.retVal;
    return orderitementityFB;
  }

  OrderItemEntityFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    orderitementityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, orderitementityFB.parameters, param,
            SqlSyntax.LessThan, orderitementityFB._addedBlocks)
        : setCriteria(pValue, orderitementityFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, orderitementityFB._addedBlocks);
    _waitingNot = '';
    orderitementityFB._addedBlocks.needEndBlock[orderitementityFB._blockIndex] =
        orderitementityFB._addedBlocks.retVal;
    return orderitementityFB;
  }

  OrderItemEntityFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    orderitementityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, orderitementityFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, orderitementityFB._addedBlocks)
        : setCriteria(pValue, orderitementityFB.parameters, param,
            SqlSyntax.LessThan, orderitementityFB._addedBlocks);
    _waitingNot = '';
    orderitementityFB._addedBlocks.needEndBlock[orderitementityFB._blockIndex] =
        orderitementityFB._addedBlocks.retVal;
    return orderitementityFB;
  }

  OrderItemEntityFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    orderitementityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, orderitementityFB.parameters, param,
            SqlSyntax.LessThanOrEquals, orderitementityFB._addedBlocks)
        : setCriteria(pValue, orderitementityFB.parameters, param,
            SqlSyntax.GreaterThan, orderitementityFB._addedBlocks);
    _waitingNot = '';
    orderitementityFB._addedBlocks.needEndBlock[orderitementityFB._blockIndex] =
        orderitementityFB._addedBlocks.retVal;
    return orderitementityFB;
  }

  OrderItemEntityFilterBuilder inValues(dynamic pValue) {
    orderitementityFB._addedBlocks = setCriteria(
        pValue,
        orderitementityFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        orderitementityFB._addedBlocks);
    _waitingNot = '';
    orderitementityFB._addedBlocks.needEndBlock[orderitementityFB._blockIndex] =
        orderitementityFB._addedBlocks.retVal;
    return orderitementityFB;
  }
}
// endregion OrderItemEntityField

// region OrderItemEntityFilterBuilder
class OrderItemEntityFilterBuilder extends SearchCriteria {
  OrderItemEntityFilterBuilder(OrderItemEntity obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  OrderItemEntity _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  OrderItemEntityFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  OrderItemEntityFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  OrderItemEntityFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  OrderItemEntityFilterBuilder where(String whereCriteria,
      {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  OrderItemEntityFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  OrderItemEntityFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  OrderItemEntityFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  OrderItemEntityFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  OrderItemEntityFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  OrderItemEntityFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  OrderItemEntityFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  OrderItemEntityField setField(
      OrderItemEntityField field, String colName, DbType dbtype) {
    return OrderItemEntityField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  OrderItemEntityField _id;
  OrderItemEntityField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  OrderItemEntityField _qty;
  OrderItemEntityField get qty {
    return _qty = setField(_qty, 'qty', DbType.integer);
  }

  OrderItemEntityField _indications;
  OrderItemEntityField get indications {
    return _indications = setField(_indications, 'indications', DbType.text);
  }

  OrderItemEntityField _productId;
  OrderItemEntityField get productId {
    return _productId = setField(_productId, 'productId', DbType.integer);
  }

  OrderItemEntityField _orderId;
  OrderItemEntityField get orderId {
    return _orderId = setField(_orderId, 'orderId', DbType.integer);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (OrderItemEntity._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<OrderItemEntity> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();

    if (OrderItemEntity._softDeleteActivated && !hardDelete) {
      r = await _obj._mnOrderItemEntity.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnOrderItemEntity.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from order_item ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnOrderItemEntity.updateBatch(qparams, values);
  }

  /// This method always returns OrderItemEntity Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<OrderItemEntity>
  Future<OrderItemEntity> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnOrderItemEntity.toList(qparams);
    final data = await objFuture;
    OrderItemEntity obj;
    if (data.isNotEmpty) {
      obj = OrderItemEntity.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('product.plProductEntity') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plProductEntity'))) {
          /*_loadedFields.add('product.plProductEntity');*/
          obj.plProductEntity = obj.plProductEntity ??
              await obj.getProductEntity(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
        if (/*!_loadedFields.contains('order.plOrderEntity') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plOrderEntity'))) {
          /*_loadedFields.add('order.plOrderEntity');*/
          obj.plOrderEntity = obj.plOrderEntity ??
              await obj.getOrderEntity(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [OrderItemEntity]
  ///
  /// <returns>int
  Future<int> toCount(
      [VoidCallback Function(int c) orderitementityCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final orderitementitiesFuture =
        await _obj._mnOrderItemEntity.toList(qparams);
    final int count = orderitementitiesFuture[0]['CNT'] as int;
    if (orderitementityCount != null) {
      orderitementityCount(count);
    }
    return count;
  }

  /// This method returns List<OrderItemEntity> [OrderItemEntity]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<OrderItemEntity>
  Future<List<OrderItemEntity>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<OrderItemEntity> orderitementitiesData =
        await OrderItemEntity.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return orderitementitiesData;
  }

  /// This method returns Json String [OrderItemEntity]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [OrderItemEntity]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [OrderItemEntity]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnOrderItemEntity.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [OrderItemEntity]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM order_item WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnOrderItemEntity.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [OrderItemEntity]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnOrderItemEntity.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await OrderItemEntity.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnOrderItemEntity.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion OrderItemEntityFilterBuilder

// region OrderItemEntityFields
class OrderItemEntityFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fQty;
  static TableField get qty {
    return _fQty = _fQty ?? SqlSyntax.setField(_fQty, 'qty', DbType.integer);
  }

  static TableField _fIndications;
  static TableField get indications {
    return _fIndications = _fIndications ??
        SqlSyntax.setField(_fIndications, 'indications', DbType.text);
  }

  static TableField _fProductId;
  static TableField get productId {
    return _fProductId = _fProductId ??
        SqlSyntax.setField(_fProductId, 'productId', DbType.integer);
  }

  static TableField _fOrderId;
  static TableField get orderId {
    return _fOrderId =
        _fOrderId ?? SqlSyntax.setField(_fOrderId, 'orderId', DbType.integer);
  }
}
// endregion OrderItemEntityFields

//region OrderItemEntityManager
class OrderItemEntityManager extends SqfEntityProvider {
  OrderItemEntityManager()
      : super(AppDatabase(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'order_item';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion OrderItemEntityManager
class AppDatabaseSequenceManager extends SqfEntityProvider {
  AppDatabaseSequenceManager() : super(AppDatabase());
}
// END OF ENTITIES
